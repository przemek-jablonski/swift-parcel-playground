# https://developer.apple.com/documentation/xcode/creating-a-multi-platform-binary-framework-bundle
# https://github.com/bielikb/xcframeworks
# https://github.com/unsignedapps/swift-create-xcframework
# https://github.com/segment-integrations/swift-create-xcframework
# https://forums.swift.org/t/macros-and-xcframeworks/68122/40
# 
# https://swifttoolkit.dev/posts/releasing-with-gh-actions
# 

FASTLANE_RUN_UUID = SecureRandom.uuid()

before_all do |lane, options|
  ensure_bundle_exec
  print("FASTLANE_RUN_UUID", FASTLANE_RUN_UUID)
  print("Options", options.sort)
  print("ENV", ENV['CI'] ? "-" : ENV.sort)
  xcodes(version: '16.2.0', select_for_current_build_only: true)
  configure_xcode_instance
end

after_all do |lane, options|
  cleanup()
end

error do |lane, exception|
  cleanup()
end

private_lane :cleanup do |options|
  print("pwd", Dir.pwd)
  remove_temporary_directory
end

lane :build_swift_dependencies do |options|
  options[:xcode_version] ||= "15.4.0"
  options[:git_url] ||= "git@github.com:pointfreeco/swift-dependencies.git"
  options[:scheme] ||= "Dependencies"
  options[:workspace] ||= "./checkout/Dependencies.xcworkspace"
  options[:destinations] ||= ["iOS Simulator", "iOS", "macOS", "watchOS"] # fixme
  # options[:destinations] ||= ["iOS Simulator"] # fixme
  options[:repository_edits] = lambda { |checkout_dir:|
    sh("rm -r #{checkout_dir}/Integration")

    regex_substitute(
      file_path: "#{checkout_dir}/Package.swift", 
      regex: /(\.library\(\s*name:\s*"Dependencies",\s*)(targets:\s*\["Dependencies"\])/m, 
      substitute: '\1type: .static, \2'
      #substitute: '\1type: .dynamic, \2'
    )
    regex_substitute(
      file_path: "#{checkout_dir}/Package@swift-6.0.swift", 
      regex: /(\.library\(\s*name:\s*"Dependencies",\s*)(targets:\s*\["Dependencies"\])/m, 
      substitute: '\1type: .static, \2'
      # substitute: '\1type: .dynamic, \2'
    )
  }
  options[:framework_slices_build] = ->(**args) { build_library_slices(**args) }
  options[:framework_slices_bundle] = ->(**args) { bundle_library_slices(**args) }
  options[:integration_tests] = ->(*) {}

  build_binary(options)
end

lane :build_swift_composable_architecture do |options|  
  options[:xcode_version] ||= "15.4.0"
  options[:git_url] ||= "git@github.com:pointfreeco/swift-composable-architecture.git"
  options[:scheme] ||= "ComposableArchitecture"
  options[:workspace] ||= "./checkout/ComposableArchitecture.xcworkspace"
  # options[:destinations] = ["iOS Simulator", "iOS", "iPadOS", "iPadOS Simulator" "macOS", "macOS,variant=Mac Catalyst", "tvOS", "watchOS", "watchOS Simulator"]
  # options[:destinations] = ["iOS Simulator", "iOS", "iPadOS", "iPadOS Simulator", "macOS", "macOS,variant=Mac Catalyst"]
  options[:destinations] ||= ["iOS Simulator", "iOS", "macOS"]
  # options[:tag] = PROVIDE_AS_COMMAND_LINE_ARGUMENT
  
  options[:repository_edits] ||= lambda { |checkout_dir:|
    describe "Removing /Examples to prevent additional build dependencies / configuration conflicts"
    sh("rm -r #{checkout_dir}/Examples")

    describe "Hardwiring the Package.swift to generate dynamic framework as it's library output"
    regex_substitute(
      file_path: "#{checkout_dir}/Package.swift", 
      regex: /(\.library\(\s*name:\s*"ComposableArchitecture",\s*)(targets:\s*\["ComposableArchitecture"\])/m, 
      substitute: '\1type: .static, \2'
      #substitute: '\1type: .dynamic, \2'
    )
    regex_substitute(
      file_path: "#{checkout_dir}/Package@swift-6.0.swift", 
      regex: /(\.library\(\s*name:\s*"ComposableArchitecture",\s*)(targets:\s*\["ComposableArchitecture"\])/m, 
      substitute: '\1type: .static, \2'
      # substitute: '\1type: .dynamic, \2'
    )
  }

  options[:integration_tests] ||= lambda { |repo_name:, integration_dir:, logs_dir:|
      describe "Copying integration Package into temporary workspace"
      sh("cp ../../#{repo_name}/#{repo_name}-integration/Package.swift #{integration_dir}")
      # sh("cp ../../#{repo_name}/#{repo_name}-integration/Package.resolved #{integration_dir}")
      sh("cp -r ../../#{repo_name}/#{repo_name}-integration/Sources #{integration_dir}")
      sh("cp -r ../../#{repo_name}/#{repo_name}-integration/Tests #{integration_dir}")

      sh("ls -al #{integration_dir}")
    
      in_directory(integration_dir) do
        describe "Setting integration Package with provided version tag"
        regex_substitute(
          file_path: "Package.swift",
          regex: 'let swiftComposableArchitectureVersion: Version = #{VERSION}',
          substitute: %Q(let swiftComposableArchitectureVersion: Version = "#{options[:tag]}")
        )

        describe "Setting integration Package with remote dependency"
        regex_substitute(
          file_path: "Package.swift",
          # regex: '/let swiftComposableArchitecture = #{DEPENDENCY}/',
          regex: 'let swiftComposableArchitecture = #{DEPENDENCY}',
          substitute: 'let swiftComposableArchitecture = swiftComposableArchitectureRemote'
        )

        execute_with_logs(
          log_path: "../#{logs_dir}/integration_build.log",
          command: "swift build --configuration release"
        )

        execute_with_logs(
          log_path: "../#{logs_dir}/integration_test.log",
          command: "swift test --parallel"
        )
      end

      describe "Removing integration Package contents from temporary workspace"
      sh("rm -rf #{integration_dir}/*")
  }

  build_binary(options)
end

desc "Builds an .xcframework binary for provided parameters"
lane :build_binary do |options|
  describe "Extracting and validating inputs"
  inputs = validate_build_binary_inputs(options)
  git_url, tag, repo_owner, repo_name, workspace, scheme, destinations, xcode_version = inputs.values_at(
    :git_url, :tag, :repo_owner, :repo_name, :workspace, :scheme, :destinations, :xcode_version
  )
  repository_edits, framework_slices_build, framework_slices_bundle, integration_tests = inputs.values_at(
    :repository_edits, :framework_slices_build, :framework_slices_bundle, :integration_tests
  )

  describe "Changing xcode version to one used by the project authors"
  xcodes(version: '15.4.0', select_for_current_build_only: true)
  configure_xcode_instance

  describe "Creating a temporary directory to become a new workspace"
  temp_dir = create_temporary_directory
  print("temp_dir", temp_dir)

  in_directory(temp_dir) do
    sh("pwd")
    sh("ls -al")

    checkout_dir = "./checkout"
    
    describe "Cloning a repository..."
    sh("git clone #{git_url} #{checkout_dir} --depth 1 --branch #{tag}")
    sh("ls -al #{checkout_dir}")

    describe "Performing repository edits..."
    repository_edits.call(checkout_dir: checkout_dir)

    describe "Building framework Slices..."
    framework_slices_build.call(options: options)
    # describe "Archiving Slices for destinations: #{options[:destinations] }"
    # options[:destinations].each do |slice|
    #   describe "Archiving Slice `#{slice}`"
    #   normalized_slice = normalize_destination_name(slice)
    #   UI.message normalized_slice
    #   execute_with_logs(
    #     log_path: "./logs/xcodebuild_archive_#{normalized_slice}.log",
    #     command: xcodebuild(
    #       command: "archive",
    #       workspace: options[:workspace],
    #       scheme: options[:scheme],
    #       destination: "generic/platform=#{slice}",
    #       archive_path: "./archives/#{normalized_slice}",
    #       derived_data_path: "./derived_data",
    #       xcargs: []
    #     )
    #   )
    # end

    describe "Creating XCFramework from archived slices..."
    framework_slices_bundle.call(options: options, archives_dir: "./archives")
    # sh("ls -al ./archives")

    # archives = Dir.glob("./archives/*.xcarchive")
    # frameworks = archives.map { |archive| "#{archive}/Products/Library/Frameworks/#{scheme}.framework" }

    # execute_with_logs(
    #   log_path: "./logs/xcodebuild_create_dynamic_xcframework.log",
    #   command: xcodebuild_create_dynamic_xcframework(
    #     frameworks: frameworks, 
    #     archives: archives, 
    #     dsyms: [],
    #     output_path: "./outputs/#{scheme}.xcframework"
    #   )
    # )
    
    describe "Performing integration tests for newly created .xcframework..."
    integration_tests.call(repo_name: repo_name, integration_dir: "./integration", logs_dir: "./logs")
  end
end

#############################################################################################################
#############################################################################################################
########                                                                                             ########
######## ------------------------------------- BUILD STEPS ----------------------------------------- ########
########                                                                                             ########
#############################################################################################################
#############################################################################################################

# Running xcodebuild "archive" for each destination - suitable for Package targets of `dynamic` type
def archive_framework_slices(options:)
  describe "Archiving Slices for destinations: #{options[:destinations]}"
  options[:destinations].each do |slice|
    describe "Archiving Slice `#{slice}`"
    normalized_slice = normalize_destination_name(slice)
    UI.message normalized_slice
    execute_with_logs(
      log_path: "./logs/xcodebuild_archive_#{normalized_slice}.log",
      command: xcodebuild(
        command: "archive",
        workspace: options[:workspace],
        scheme: options[:scheme],
        destination: "generic/platform=#{slice}",
        archive_path: "./archives/#{normalized_slice}",
        derived_data_path: "./derived_data",
        xcargs: []
      )
    )
  end
end

# Running xcodebuild "create-xcframework" - suitable for "combining" slices of `dynamic` type targets
def bundle_framework_slices(options:, archives_dir:)
  describe "Archiving dynamic framework slices for destinations at `#{archives_dir}`"
  sh("ls -al #{archives_dir}")

  archives = Dir.glob("#{archives_dir}/*.xcarchive")
  print(:archives, archives)

  frameworks = archives.map { |archive| "#{archive}/Products/Library/Frameworks/#{options[:scheme]}.framework" }
  print(:frameworks, frameworks)

  if frameworks.empty?
    UI.user_error!("No frameworks found in #{archives_dir}. Aborting.")
  end

  execute_with_logs(
    log_path: "./logs/xcodebuild_create_dynamic_xcframework.log",
    command: xcodebuild_create_dynamic_xcframework(
      frameworks: frameworks, 
      archives: archives, 
      dsyms: [],
      output_path: "./outputs/#{options[:scheme]}.xcframework"
    )
  )
end

# Running xcodebuild "build" for each destination - suitable for Package targets of `static` type
def build_library_slices(options:)
  describe "Building Slices for destinations: #{options[:destinations]}"
  arch = "arm64"
  configuration = "Release"
  derived_data_path = "./derived_data"
  repo_name = options[:repo_name]
  product_name = options[:scheme]

  options[:destinations].each do |slice|
    describe "Archiving Slice `#{slice}`"
    normalized_slice = normalize_destination_name(slice)
    UI.message normalized_slice
    execute_with_logs(
      log_path: "./logs/xcodebuild_archive_#{normalized_slice}.log",
      command: xcodebuild(
        command: "clean build",
        workspace: options[:workspace],
        scheme: options[:scheme],
        destination: "generic/platform=#{slice}",
        archive_path: "./archives/#{normalized_slice}",
        derived_data_path: derived_data_path,
        xcargs: []
      )
    )
    
    # object_files_glob = "#{derived_data_path}/Build/Intermediates.noindex/*#{repo_name}.build/#{configuration}*/#{product_name}.build/Objects-normal/#{arch}/Binary/#{product_name}.o"
    object_files_glob = "#{derived_data_path}/Build/Products"
    # Copy the .o file(s) into the archive directory first
    archive_dir = "./archives/#{normalized_slice}"
    FileUtils.mkdir_p(archive_dir)
    sh("cp -r #{object_files_glob} #{archive_dir}/")

    # Fish out Dependencies.o and Dependencies.swiftmodule from any subfolder and copy to archive_dir
    dependencies_o = Dir.glob("#{archive_dir}/**/#{product_name}.o").first
    dependencies_swiftmodule = Dir.glob("#{archive_dir}/**/#{product_name}.swiftmodule").first
    if dependencies_o.nil? || dependencies_o.empty?
      UI.user_error!("No #{product_name}.o file found in #{archive_dir}")
    end
    if dependencies_swiftmodule.nil? || dependencies_swiftmodule.empty?
      UI.user_error!("No #{product_name}.swiftmodule directory found in #{archive_dir}")
    end
    sh("cp \"#{dependencies_o}\" #{archive_dir}/")
    sh("cp -R \"#{dependencies_swiftmodule}\" #{archive_dir}/")

    # Fish out all .h files from derived data and copy to archive_dir
    headers_glob = "#{derived_data_path}/Build/Intermediates.noindex/*#{repo_name}.build/#{configuration}*/#{product_name}.build/**/*.h"
    dependencies_headers = Dir.glob(headers_glob)
    dependencies_headers.each do |header|
      sh("cp \"#{header}\" #{archive_dir}/")
    end

    # # Create static library from the .o file in the archive_dir
    # static_lib_path = "#{archive_dir}/#{product_name}.a"
    # sh("ar -crs \"#{static_lib_path}\" #{archive_dir}/#{product_name}.o")
    sh("ls -al #{archive_dir}")
  end
end

# Generates .a files then creates a static xcframework from all .a files - suitable for combining slices of static type targets
def bundle_library_slices(options:, archives_dir:)
  object_files = Dir.glob("#{archives_dir}/*/*.o")
  if object_files.empty?
    UI.user_error!("No .o files found directly in #{archives_dir}/*/. Aborting static library creation.")
  end

  object_files.each do |o_file|
    a_file = o_file.sub(/\.o$/, ".a")
    sh("ar -crs \"#{a_file}\" \"#{o_file}\"")
    UI.success "Created static library: #{a_file} from #{o_file}"
  end

  static_libraries = Dir.glob("#{archives_dir}/**/*.a").map { |f| File.expand_path(f) }
  if static_libraries.empty?
    UI.user_error!("No static libraries found in #{archives_dir}/**/*.a. Aborting static xcframework creation.")
  end

  product_name = options[:scheme]
  static_xcframework_output = File.expand_path("./outputs/#{product_name}.xcframework")
  UI.success "Creating static xcframework at: #{static_xcframework_output} from libraries: #{static_libraries}"

  execute_with_logs(
    log_path: "./logs/xcodebuild_create_static_xcframework.log",
    command: xcodebuild_create_static_xcframework(
      libraries: static_libraries,
      dsyms: [],
      output_path: static_xcframework_output
    )
  )
  
  output_dir = File.expand_path("./outputs")
  UI.success "Static xcframework created successfully. See: \
    #{output_dir}"
  sh("ls -al \"#{output_dir}\"")
end

def regex_substitute(file_path:, regex:, substitute:)
  UI.message "Substituting content in file: `#{file_path}`"
  UI.message "Regex: #{regex}"
  UI.message "Substitute: #{substitute}"
  contents = File.read(file_path)
  new_contents = contents.gsub(regex, substitute)
  if new_contents == contents
    UI.error "No matches found for regex: #{regex}"
    UI.error "In file: #{file_path}"
    UI.user_error!("Regex substitution failed - no matches found")
  end
  File.write(file_path, new_contents)
  UI.message "File `#{file_path}` overwritten succesfully"
end

def execute_with_logs(log_path:, command:)
  UI.message "Executing command: `#{command}`"
  UI.message "Recording output to: #{log_path}"
  sh("touch #{log_path}")
  sh("set -o pipefail && #{command.split.join(" ")} | tee #{log_path} | xcpretty --color --simple")
end

def xcodebuild(command:, workspace:, scheme:, destination:, archive_path:, derived_data_path:, xcargs: [])
  args = xcargs.join(' ')
  <<~CMD
    xcodebuild #{command} \
      -workspace #{workspace} \
      -scheme #{scheme} \
      -configuration Release \
      -destination "#{destination}" \
      -archivePath "#{archive_path}" \
      -derivedDataPath #{derived_data_path} \
      -skipPackagePluginValidation \
      -skipMacroValidation \
      -parallelizeTargets \
      -showBuildTimingSummary \
      #{args}
      SKIP_INSTALL=NO \
      BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
      OTHER_CFLAGS="-fembed-bitcode" \
      BITCODE_GENERATION_MODE="bitcode" \
      ENABLE_BITCODE=YES
  CMD
end

def xcodebuild_archive_slice(slice:, workspace:, scheme:, archives_dir:, logs_dir:)
  normalized_slice = normalize_destination_name(slice)
  UI.message normalized_slice
  execute_with_logs(
    log_path: "#{logs_dir}/xcodebuild_archive_#{normalized_slice}.log",
    command: xcodebuild_archive_package(
      workspace: workspace,
      scheme: scheme,
      destination: "generic/platform=#{slice}",
      archive_path: "#{archives_dir}/#{normalized_slice}",
      xcargs: []
    )
  )
end

def xcodebuild_create_dynamic_xcframework(frameworks:, archives:, dsyms:, output_path:)
  framework_args = frameworks.map { |fw| "-framework #{fw}" }.join("\n")
  archive_args = archives.map { |ar| "-archive #{ar}" }.join("\n      ")
  _ = dsyms.map { |ds| "-debug-symbols #{ds}" }.join("\n      ")
  args = [framework_args, archive_args].reject(&:empty?).join("\n      ")
  #, dsyms_args
  <<~CMD
    xcodebuild -create-xcframework \
      #{args}
      -output #{output_path}
  CMD
end

def xcodebuild_create_static_xcframework(libraries:, dsyms:, output_path:)
  library_args = libraries.map { |lib| "-library #{lib}" }.join("\n")
  # _ = dsyms.map { |ds| "-debug-symbols #{ds}" }.join("\n      ")
  args = [library_args].reject(&:empty?).join("\n      ")
  <<~CMD
    xcodebuild -create-xcframework \
      #{args}
      -output #{output_path}
  CMD
end

def configure_xcode_instance
  UI.message "Configuring xcode validations"
  sh("defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES")
  sh("defaults write com.apple.dt.Xcode IDESkipMacroValidation -bool YES")
  sh("defaults write com.apple.dt.xcodebuild PBXNumberOfParallelBuildSubtasks #{Etc.nprocessors}")
  sh("defaults write com.apple.dt.xcodebuild IDEBuildOperationMaxNumberOfConcurrentCompileTasks #{Etc.nprocessors}")
  sh("defaults write com.apple.dt.Xcode PBXNumberOfParallelBuildSubtasks #{Etc.nprocessors}")
  sh("defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks #{Etc.nprocessors}")
end

#############################################################################################################
#############################################################################################################
########                                                                                             ########
######## --------------------------------------- HELPERS ------------------------------------------- ########
########                                                                                             ########
#############################################################################################################
#############################################################################################################

def in_directory(directory)
  UI.message "Changing directory to #{File.expand_path(directory)}"
  
  unless Dir.exist?(directory)
    describe "Directory does not exist, running mkdir"
    FileUtils.mkdir_p(directory)
    UI.success "Successfully created directory: #{File.expand_path(directory)}"
  end
  
  Dir.chdir(directory) do
    UI.message "Directory changed to #{File.expand_path(directory)}"
    print("pwd", Dir.pwd)
    yield if block_given?
  end

  UI.message "Left directory scope: #{File.expand_path(directory)}"
  print("pwd", Dir.pwd)
end

def create_temporary_directory
  UI.message "Creating temporary directory"
  temp_dir = "temp_dir_#{FASTLANE_RUN_UUID}"
  
  print(:temp_dir, File.expand_path(temp_dir))
  Dir.mkdir(temp_dir)
  Dir.mkdir("#{temp_dir}/checkout")
  Dir.mkdir("#{temp_dir}/logs")
  Dir.mkdir("#{temp_dir}/archives")
  Dir.mkdir("#{temp_dir}/outputs")
  Dir.mkdir("#{temp_dir}/integration")
  Dir.mkdir("#{temp_dir}/derived_data")
  temp_dir = "./#{temp_dir}"

  UI.message "Directory created: #{File.expand_path(temp_dir)}"
  
  return temp_dir
end

def remove_temporary_directory
  UI.message "Removing temporary directory"
  temp_dir = "temp_dir_#{FASTLANE_RUN_UUID}"
  print(:temp_dir, File.expand_path(temp_dir))

  # if Dir.exist?(temp_dir)
  #   UI.success "Removing temporary directory: #{temp_dir}"
  #   FileUtils.rm_rf(temp_dir)
  # else
  #   UI.message "Temporary directory does not exist: #{temp_dir}"
  # end
  # print("ls -al", Dir.entries(Dir.pwd))
end

def print(key, value)
  UI.success "#{key}:"
  if value.is_a?(Array)
    value.sort.each { |v| UI.message "\t#{v}" }
  else
    UI.message "\t#{value}"
  end
end

def print_missing_parameter(key, options = nil)
  UI.error "`#{key}`"
  UI.error "`#{key}` parameter is missing or failed to calculate. Either wasn't provided in lane's |options| or it's runtime calculation failed"
  if options
    UI.error "Parameter should be accessible from lane's |options|, but has not been found"
    UI.message "Available options:"
    options.sort.each { |v| UI.message "\t#{v}" }
  else
    UI.error "`#{key}` is a dynamic parameter that was supposed to be calculated succesfully on runtime"
    UI.error "Double-check parameters and lane's flow to debug the issue"
  end
  UI.user_error! "`#{key}` parameter is missing or failed to calculate"
end

def extract_repo_owner(git_url)
  UI.message "Extracting repository owner from URL `#{git_url}`"
  if git_url.start_with?("https://")
    # Handle HTTPS URLs (https://github.com/owner/repo.git)
    git_url.split("/")[-2]
  else
    # Handle SSH URLs (git@github.com:owner/repo.git)
    git_url.split(":")[-1].split("/")[0]
  end
end

def extract_repo_name(git_url)
  UI.message "Extracting repository name from URL `#{git_url}`"
  if git_url.start_with?("https://")
    # Handle HTTPS URLs (https://github.com/owner/repo.git)
    git_url.split("/")[-1].sub(".git", "")
  else
    # Handle SSH URLs (git@github.com:owner/repo.git)
    git_url.split(":")[-1].split("/")[1].sub(".git", "")
  end
end

def normalize_destination_name(str)
  str.downcase.gsub(/[^a-z0-9]+/, '_').gsub(/^_+|_+$/, '')
end

def normalize_static_destination_name(str, arch:)
  str.downcase.gsub(/[^a-z0-9]+/, '_').gsub(/^_+|_+$/, '')
end

def describe(step)
  UI.important ""
  UI.important step
end

def validate_build_binary_inputs(options)
  print(:options, options.sort)

  describe "Looking for the required `git_url` (eg. git@github.com:pointfreeco/swift-composable-architecture.git)"
  git_url = options[:git_url]
  print(:git_url, git_url)
  print_missing_parameter(:git_url, options) unless git_url

  describe "Looking for the required `tag` (eg. 1.20.2)"
  tag = options[:tag]
  print(:tag, tag)
  print_missing_parameter(:tag, options) unless tag

  describe "Calculating required `repo_owner` (eg. pointfreeco)"
  repo_owner = extract_repo_owner(git_url)
  print(:repo_owner, repo_owner)
  print_missing_parameter(:repo_owner) unless repo_owner
  
  describe "Calculating required `repo_name` (eg. swift-composable-architecture)"
  repo_name = extract_repo_name(git_url)
  print(:repo_name, repo_name)
  print_missing_parameter(:repo_name) unless repo_name

  describe "Looking for the required `workspace` (eg. ./checkout/ComposableArchitecture.xcworkspace)"
  workspace = options[:workspace]
  print(:workspace, workspace)
  print_missing_parameter(:workspace, options) unless workspace

  describe "Looking for the required `scheme` (eg. ComposableArchitecture)"
  scheme = options[:scheme]
  print(:scheme, scheme)
  print_missing_parameter(:scheme, options) unless scheme

  # destinations = ["iOS Simulator", "iOS", "iPadOS", "iPadOS Simulator" "macOS", "macOS,variant=Mac Catalyst", "tvOS", "watchOS", "watchOS Simulator", "carPlayOS", "carPlayOS Simulator"]
  describe "Looking for the required `destinations` (eg. [\"iOS\", \"iOS Simulator\"])"
  destinations = options[:destinations]
  print(:destinations, destinations)
  print_missing_parameter(:destinations, options) unless destinations

  describe "Looking for the required `xcode_version` (eg. 16.4.0)"
  xcode_version = options[:xcode_version]
  print(:xcode_version, xcode_version)
  print_missing_parameter(:xcode_version, options) unless xcode_version

  describe "Looking for the required `repository_edits` (lambda describing required edits to the repo before building. Pass empty lambda if not required, cannot be nil)"
  repository_edits = options[:repository_edits]
  print(:repository_edits, repository_edits)
  print_missing_parameter(:repository_edits, options) unless repository_edits

  describe "Looking for the required `integration_tests` (lambda describing how to perform integration tests for the built framework. Pass empty lambda if not required, cannot be nil)"
  integration_tests = options[:integration_tests]
  print(:integration_tests, integration_tests)
  print_missing_parameter(:integration_tests, options) unless integration_tests

  describe "Looking for the required `framework_slices_build` (lambda describing how to build framework bits for every destination. Pass empty lambda if not required, cannot be nil)"
  framework_slices_build = options[:framework_slices_build]
  print(:framework_slices_build, framework_slices_build)
  print_missing_parameter(:framework_slices_build, options) unless framework_slices_build

  describe "Looking for the required `framework_slices_bundle` (lambda describing how to combine all framework slices into a single .xcframework. Pass empty lambda if not required, cannot be nil)"
  framework_slices_bundle = options[:framework_slices_bundle]
  print(:framework_slices_bundle, framework_slices_bundle)
  print_missing_parameter(:framework_slices_bundle, options) unless framework_slices_bundle

  { 
    git_url: git_url, 
    tag: tag, 
    repo_owner: repo_owner, 
    repo_name: repo_name, 
    workspace: workspace,
    scheme: scheme, 
    destinations: destinations, 
    xcode_version: xcode_version,
    repository_edits: repository_edits,
    integration_tests: integration_tests,
    framework_slices_build: framework_slices_build,
    framework_slices_bundle: framework_slices_bundle
  }
end