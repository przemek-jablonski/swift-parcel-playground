# https://developer.apple.com/documentation/xcode/creating-a-multi-platform-binary-framework-bundle
# https://github.com/bielikb/xcframeworks
# https://github.com/unsignedapps/swift-create-xcframework
# https://github.com/segment-integrations/swift-create-xcframework

FASTLANE_RUN_UUID = SecureRandom.uuid()

before_all do |lane, options|
  ensure_bundle_exec
  print("FASTLANE_RUN_UUID", FASTLANE_RUN_UUID)
  print("Options", options.sort)
  print("ENV", ENV['CI'] ? "-" : ENV.sort)
  xcodes(version: '16.2.0', select_for_current_build_only: true)
  configure_xcode_instance
end

after_all do |lane, options|
  cleanup()
end

error do |lane, exception|
  cleanup()
end

private_lane :cleanup do |options|
  print("pwd", Dir.pwd)
  remove_temporary_directory
end

lane :build_swift_composable_architecture do |options|
  describe "Looking for the required git_url"
  git_url = "git@github.com:pointfreeco/swift-composable-architecture.git"
  print("git_url", git_url)
  printMissingParameter(:git_url, options) unless git_url

  describe "Looking for the required tag"
  tag = options[:tag]
  print("tag", tag)
  printMissingParameter(:tag, options) unless tag

  describe "Looking for the required repo_owner"
  repo_owner = extract_repo_owner(git_url)
  print("repo_owner", repo_owner)
  printMissingParameter(:repo_owner) unless repo_owner
  
  describe "Looking for the required repo_name"
  repo_name = extract_repo_name(git_url)
  print("repo_name", repo_name)
  printMissingParameter(:repo_owner) unless repo_owner

  # Create a temporary directory to store the cloned repository, build artifacts, and logs
  describe "Creating a temporary directory to become a new working space"
  temp_dir = create_temporary_directory
  # temp_dir = "#{Dir.pwd}/#{temp_dir}"
  print("temp_dir", temp_dir)

  in_directory(temp_dir) do
    sh("pwd")
    sh("ls -al")

    checkout_dir = "./checkout"
    archives_dir = "./archives"
    logs_dir = "./logs"
    outputs_dir = "./outputs"
    
    describe "Cloning a repository"
    sh("cp -r /Users/przemyslawjablonski/Development/swift-parcel-playground/parcels/fastlane/swift-composable-architecture/ #{checkout_dir}")
    sh("ls -al #{checkout_dir}")

    describe "Checking out the requested tag"
    sh("git -C #{checkout_dir} tag -n --sort=-v:refname")
    sh("git -C #{checkout_dir} checkout #{tag}")

    describe "Performing repository edits..."
  
    describe "Removing /Examples to prevent additional build dependencies / configuration conflicts"
    sh("rm -r #{checkout_dir}/Examples")

    describe "Hardwiring the Package.swift to generate dynamic framework as it's library output"
    regex_substitute(
      file_path: "#{checkout_dir}/Package.swift", 
      regex: /(\.library\(\s*name:\s*"ComposableArchitecture",\s*)(targets:\s*\["ComposableArchitecture"\])/m, 
      substitute: '\1type: .dynamic, \2'
    )
    regex_substitute(
      file_path: "#{checkout_dir}/Package@swift-6.0.swift", 
      regex: /(\.library\(\s*name:\s*"ComposableArchitecture",\s*)(targets:\s*\["ComposableArchitecture"\])/m, 
      substitute: '\1type: .dynamic, \2'
    )

    describe "Changing xcode version to one used by the project authors"
    xcodes(version: '15.4.0', select_for_current_build_only: true)
    configure_xcode_instance

    describe "Archiving framework Slices..."
    workspace = "#{checkout_dir}/ComposableArchitecture.xcworkspace"
    scheme = "ComposableArchitecture"

    # todo: for each platform
    # # todo: dsyms
    # todo: importants to separate def
    slice = "iOS"
    describe "Archiving Slice `#{slice}`"
    xcodebuild_archive_slice(slice: slice, workspace: workspace, scheme: scheme, archives_dir: archives_dir, logs_dir: logs_dir)

    slice = "iOS Simulator"
    describe "Archiving Slice `#{slice}`"
    xcodebuild_archive_slice(slice: slice, workspace: workspace, scheme: scheme, archives_dir: archives_dir, logs_dir: logs_dir)

    slice = "macOS"
    describe "Archiving Slice `#{slice}`"
    xcodebuild_archive_slice(slice: slice, workspace: workspace, scheme: scheme, archives_dir: archives_dir, logs_dir: logs_dir)

    slice = "macOS,variant=Mac Catalyst"
    describe "Archiving Slice `#{slice}`"
    xcodebuild_archive_slice(slice: slice, workspace: workspace, scheme: scheme, archives_dir: archives_dir, logs_dir: logs_dir)

    describe "Creating XCFramework from archived slices"
    sh("ls -al #{archives_dir}")

    archives = Dir.glob("#{archives_dir}/*.xcarchive")
    frameworks = archives.map { |archive| "#{archive}/Products/Library/Frameworks/#{scheme}.framework" }

    execute_xcodebuild_with_logs(
      log_path: "#{logs_dir}/xcodebuild_create_xcframework.log",
      xcodebuild: xcodebuild_create_xcframework(frameworks: frameworks, archives: archives, output_path: "#{outputs_dir}/#{scheme}.xcframework")
    )
  end
end

def in_directory(directory)
  UI.message "Changing directory to #{directory}"
  
  unless Dir.exist?(directory)
    describe "Directory does not exist, running mkdir"
    FileUtils.mkdir_p(directory)
    UI.success "Successfully created directory: #{directory}"
  end
  
  Dir.chdir(directory) do
    UI.message "Directory changed to #{directory}"
    yield if block_given?
  end

  UI.message "Leaving directory scope: #{directory}"
  UI.message "Returning to previous directory"
end

def extract_repo_owner(git_url)
  UI.message "Extracting repository owner from URL `#{git_url}`"
  if git_url.start_with?("https://")
    # Handle HTTPS URLs (https://github.com/owner/repo.git)
    git_url.split("/")[-2]
  else
    # Handle SSH URLs (git@github.com:owner/repo.git)
    git_url.split(":")[-1].split("/")[0]
  end
end

def extract_repo_name(git_url)
  UI.message "Extracting repository name from URL `#{git_url}`"
  if git_url.start_with?("https://")
    # Handle HTTPS URLs (https://github.com/owner/repo.git)
    git_url.split("/")[-1].sub(".git", "")
  else
    # Handle SSH URLs (git@github.com:owner/repo.git)
    git_url.split(":")[-1].split("/")[1].sub(".git", "")
  end
end

def print(key, value)
  UI.success "#{key}:"
  if value.is_a?(Array)
    value.sort.each { |v| UI.message "\t#{v}" }
  else
    UI.message "\t#{value}"
  end
end

def printMissingParameter(key, options = nil)
  UI.error "`#{key}`"
  UI.error "`#{key}` parameter is missing or failed to calculate. Either wasn't provided in lane's |options| or it's runtime calculation failed"
  if options
    UI.error "Parameter should be accessible from lane's |options|, but has not been found"
    UI.message "Available options:"
    options.sort.each { |v| UI.message "\t#{v}" }
  else
    UI.error "`#{key}` is a dynamic parameter that was supposed to be calculated succesfully on runtime"
    UI.error "Double-check parameters and lane's flow to debug the issue"
  end
  UI.user_error! "`#{key}` parameter is missing or failed to calculate"
end

def create_temporary_directory
  UI.message "Creating temporary directory"
  temp_dir = "temp_dir_#{FASTLANE_RUN_UUID}"
  
  print("temp_dir", temp_dir)
  Dir.mkdir(temp_dir)
  Dir.mkdir("#{temp_dir}/checkout")
  Dir.mkdir("#{temp_dir}/logs")
  Dir.mkdir("#{temp_dir}/archives")
  Dir.mkdir("#{temp_dir}/outputs")
  temp_dir = "./#{temp_dir}"

  UI.message "Directory created: #{temp_dir}"
  
  return temp_dir
end

def remove_temporary_directory
  UI.message "Removing temporary directory"
  temp_dir = "temp_dir_#{FASTLANE_RUN_UUID}"
  print("temp_dir", temp_dir)

  # if Dir.exist?(temp_dir)
  #   UI.success "Removing temporary directory: #{temp_dir}"
  #   FileUtils.rm_rf(temp_dir)
  # else
  #   UI.message "Temporary directory does not exist: #{temp_dir}"
  # end
  # print("ls -al", Dir.entries(Dir.pwd))
end

def configure_xcode_instance
  UI.message "Configuring xcode validations"
  sh("defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES")
  sh("defaults write com.apple.dt.Xcode IDESkipMacroValidation -bool YES")
  cpu_count = Etc.nprocessors
  sh("defaults write com.apple.dt.xcodebuild PBXNumberOfParallelBuildSubtasks #{cpu_count}")
  sh("defaults write com.apple.dt.xcodebuild IDEBuildOperationMaxNumberOfConcurrentCompileTasks #{cpu_count}")
  sh("defaults write com.apple.dt.Xcode PBXNumberOfParallelBuildSubtasks #{cpu_count}")
  sh("defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks #{cpu_count}")
end

def regex_substitute(file_path:, regex:, substitute:)
  UI.message "Substituting content in file: #{file_path}"
  UI.message "Regex: #{regex}"
  UI.message "Substitute: #{substitute}"
  contents = File.read(file_path)
  contents = contents.gsub(regex, substitute)
  File.write(file_path, contents)
  UI.message "File overwritten succesfully"
end

def execute_xcodebuild_with_logs(log_path:, xcodebuild:)
  UI.message "Executing xcodebuild"
  UI.message "Recording output to: #{log_path}"
  sh("touch #{log_path}")
  sh("set -o pipefail && #{xcodebuild.split.join(" ")} | tee #{log_path} | xcpretty --color --simple")
end

def xcodebuild_archive_package(workspace:, scheme:, destination:, archive_path:, xcargs: [])
  args = xcargs.join(' ')
  <<~CMD
    xcodebuild archive \
      -workspace #{workspace} \
      -scheme #{scheme} \
      -configuration Release \
      -destination "#{destination}" \
      -archivePath "#{archive_path}" \
      -skipPackagePluginValidation \
      -skipMacroValidation \
      -parallelizeTargets \
      -showBuildTimingSummary \
      #{args}
      SKIP_INSTALL=NO \
      BUILD_LIBRARY_FOR_DISTRIBUTION=YES
  CMD
end

def xcodebuild_create_xcframework(frameworks:, archives:, output_path:)
  framework_args = frameworks.map { |fw| "-framework #{fw}" }.join("\n")
  archive_args = archives.map { |ar| "-archive #{ar}" }.join("\n      ")
  args = [framework_args, archive_args].reject(&:empty?).join("\n      ")
  <<~CMD
    xcodebuild -create-xcframework \
      #{args}
      -output #{output_path}
  CMD
end

def xcodebuild_archive_slice(slice:, workspace:, scheme:, archives_dir:, logs_dir:)
  normalized_slice = normalize_destination_name(slice)
  UI.message normalized_slice
  execute_xcodebuild_with_logs(
    log_path: "#{logs_dir}/xcodebuild_archive_#{normalized_slice}.log",
    xcodebuild: xcodebuild_archive_package(
      workspace: workspace,
      scheme: scheme,
      destination: "generic/platform=#{slice}",
      archive_path: "#{archives_dir}/#{normalized_slice}",
      xcargs: []
    )
  )
end

def normalize_destination_name(str)
  str.downcase.gsub(/[^a-z0-9]+/, '_').gsub(/^_+|_+$/, '')
end

def describe(step)
  UI.important ""
  UI.important step
end



## LEGACY _____________________________________________________________________


# lane :build_swift_composable_architecture_test do |options|
#   sh("cd temp_dir_fastlane-4e1b3a3e-675e-46e0-9331-733a3bea5c84")

#   # tag argument is required
#   tag = options[:tag]
#   print("tag", tag)
#   UI.user_error!("tag: missing.") unless tag # TODO: more descriptive error

#   in_directory("#{Dir.pwd}/temp_dir_fastlane-4e1b3a3e-675e-46e0-9331-733a3bea5c84/checkout") do
#     # Checkout to requested tag
#     _ = sh("git tag -n --sort=-v:refname")
#     sh("git checkout #{tag}")

#     # Change xcode version to one used by the project authors
#     xcodes(version: '15.4.0', select_for_current_build_only: true)

#     target = "ComposableArchitecture"

#     # Query available build configurations, SDKs and destinations
#     # sh(<<~LIST_BUILD_CONFIG)
#     #   xcodebuild archive \
#     #     -workspace "ComposableArchitecture.xcworkspace" \
#     #     -list
#     # LIST_BUILD_CONFIG
    
#     # -showsdks \
#     #     -showdestinations \
#     #     -showBuildSettings \
#     #     -configuration Release \
#     #     -skipPackagePluginValidation \
#     #     -skipMacroValidation

#     # 1. Archive iOS device slice
#     # sh(<<~ARCHIVE_IOS)
#     #   xcodebuild archive \
#     #     -workspace "ComposableArchitecture.xcworkspace" \
#     #     -scheme #{target} \
#     #     -configuration Release \
#     #     -destination "generic/platform=iOS" \
#     #     -archivePath "./.generated/archives/ios_devices.xcarchive" \
#     #     -parallelizeTargets \
#     #     -skipPackagePluginValidation \
#     #     -skipMacroValidation \
#     #     SKIP_INSTALL=NO \
#     #     BUILD_LIBRARY_FOR_DISTRIBUTION=YES \   
#     # ARCHIVE_IOS
#     # #-packagePath .

#     # # # 2. Archive iOS simulator slice
#     # sh(<<~ARCHIVE_SIMULATOR)
#     #   xcodebuild archive \
#     #     -workspace "ComposableArchitecture.xcworkspace" \
#     #     -scheme #{target} \
#     #     -configuration Release \
#     #     -destination "generic/platform=iOS Simulator" \
#     #     -archivePath "./.generated/archives/ios_simulators.xcarchive" \
#     #     -parallelizeTargets \
#     #     -skipPackagePluginValidation \
#     #     -skipMacroValidation \
#     #     SKIP_INSTALL=NO \
#     #     BUILD_LIBRARY_FOR_DISTRIBUTION=YES \   
#     # ARCHIVE_SIMULATOR
#     # # #-packagePath .

#     # # 3. Create XCFramework from the archives
#     sh(<<~CREATE_XCF)
#       xcodebuild -create-xcframework \
#         -archive ./.generated/archives/ios_devices.xcarchive \
#         -archive ./.generated/archives/ios_simulators.xcarchive \
#         -output ./.generated/xcframeworks/ComposableArchitecture.xcframework
#     CREATE_XCF
#     # -framework ./.generated/archives/ios_devices.xcarchive/Products/Library/Frameworks/ComposableArchitecture.framework \
#     # -framework ./.generated/archives/ios_simulators.xcarchive/Products/Library/Frameworks/ComposableArchitecture.framework \
#     # 
#     #
    
#     # sh("xcodebuild -workspace ComposableArchitecture.xcworkspace -list")

#     #    create_xcframework(
#     #  workspace: "#{Dir.pwd}/ComposableArchitecture.xcworkspace",
#     #  scheme: 'ComposableArchitecture',
#     #  #product_name: 'Sample', # optional if scheme doesnt match the name of your framework
#     # #  destinations: ["iOS", "maccatalyst", "tvOS", "watchOS", "macOS"],
#     # #  destinations: ["iOS"],
#     #  destinations: ["macOS"],
#     #  include_dSYMs: true,
#     #  include_BCSymbolMaps: true,
#     #  include_debug_symbols: true,
#     #  enable_bitcode: true,
#     #  xcframework_output_directory: "#{Dir.pwd}/../xcframework",
#     #  remove_xcarchives: false
#     # )
#   end
# end
# 
#
#
#
#
##	swift build \
	#-q \
	#-c release \
	#--target ComposableArchitecture \
	#-Xswiftc -emit-module-interface \
	#-Xswiftc -enable-library-evolution
  
  # sh("touch #{Dir.pwd}/logs/xcodebuild.log")

#     archive = %Q(xcodebuild \
# -workspace "#{Dir.pwd}/ComposableArchitecture.xcworkspace" \
# -scheme "ComposableArchitecture" \
# SKIP_INSTALL=NO \
# BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
# OTHER_CFLAGS="-fembed-bitcode -DRESILIENT_LIBRARIES -RESILIENT_LIBRARIES -RESILIENT_LIBRARIES=YES" \
# OTHER_SWIFT_FLAGS="-Xswiftc -DRESILIENT_LIBRARIES -Xswiftc -emit-module-interface -Xswiftc -enable-library-evolution" \
# BITCODE_GENERATION_MODE="bitcode" \
# RESILIENT_LIBRARIES=YES \
# ENABLE_BITCODE=YES \
# -destination "generic/platform=iOS" \
# -archivePath "#{Dir.pwd}/xcframework/0_ComposableArchitecture.xcarchive" \
# archive \
# | tee #{Dir.pwd}/logs/xcodebuild.log \
# | xcpretty --color --simple
# )

#     sh("#{shell_setup} && #{archive}")
#     # sh(archive)

    # spm(
    #   #command: "generate-xcodeproj", 
    #   command: "build",
    #   package_path:"#{Dir.pwd}",
    #   verbose: true
    #   )


    # # Setup build variables
    # workspace = "#{Dir.pwd}/ComposableArchitecture.xcworkspace"
    # scheme = "ComposableArchitecture"
    # archive_path = "#{Dir.pwd}/../archive/archives/ComposableArchitecture.xcarchive"
    # log_dir = "#{ENV['HOME']}/Library/Logs/fastlane/xcbuild/#{Time.now.strftime('%Y-%m-%d')}/#{Process.pid}"
    # build_settings = {
    #   'SKIP_INSTALL' => 'NO',
    #   'BUILD_LIBRARY_FOR_DISTRIBUTION' => 'YES'
    # }
    # destinations = ["generic/platform=iOS"]

    # # Ensure log directory exists
    # FileUtils.mkdir_p(log_dir)
    # log_path = "#{log_dir}/xcodebuild.log"

    

      # # Build xcodebuild command using heredoc for better readability
      # command = <<~COMMAND
      #   set -o pipefail &&
      #   xcodebuild archive
      #     -workspace "#{workspace}"
      #     -scheme "#{scheme}"
      #     #{build_settings.map { |k,v| "#{k}=#{v}" }.join(" ")}
      #     #{destinations.map { |d| "-destination \"#{d}\"" }.join(" ")}
      #     -archivePath "#{archive_path}"
      #     | tee "#{log_path}"
      #     | xcpretty --color --simple
      # COMMAND

      # # Execute the command
      # sh(command)

    ##### HAS DEDICATED LOGIC
    # create_xcframework(
    #  workspace: "#{Dir.pwd}/ComposableArchitecture.xcworkspace",
    #  scheme: 'ComposableArchitecture',
    #  #product_name: 'Sample', # optional if scheme doesnt match the name of your framework
    #  destinations: ["iOS", "maccatalyst", "tvOS", "watchOS", "macOS"],
    #  #destinations: ["iOS"],
    #  include_dSYMs: true,
    #  include_BCSymbolMaps: true,
    #  include_debug_symbols: true,
    #  enable_bitcode: true,
    #  xcframework_output_directory: "#{Dir.pwd}/../xcframework",
    #  xcargs: 'RESILIENT_LIBRARIES=1',
    #  override_xcargs: false,
    #  remove_xcarchives: false
    # )
    # 
    
    #shell_setup = "set -o pipefail"


  # ______________________
  # 
  
#     sh("rm -r #{temp_dir}/checkout/Examples")


#     # Checkout to requested tag
#     _ = sh("git -C #{temp_dir}/checkout tag -n --sort=-v:refname")

#     sh("git -C #{temp_dir}/checkout checkout #{tag}")


#     # Change xcode version to one used by the project authors
#     xcodes(version: '15.4.0', select_for_current_build_only: true)
#     skip_xcode_validations

#     # in_directory("#{temp_dir}/checkout") do
#     #   sh("swift create-xcframework")
#     # end

#     sh(<<~BUILD_IOS)
#     xcodebuild build \
#       -workspace #{temp_dir}/checkout/ComposableArchitecture.xcworkspace \
#       -configuration Release \
#       -scheme ComposableArchitecture \
#       -destination "generic/platform=iOS" \
#       -archivePath "#{temp_dir}/checkout/archives/ios" \
#       -skipPackagePluginValidation \
#       -skipMacroValidation \
#       -quiet \
#       SKIP_INSTALL=NO \
#       BUILD_LIBRARY_FOR_DISTRIBUTION=YES
# BUILD_IOS

# sh(<<~BUILD_IOS_SIMULATOR)
#     xcodebuild archive \
#       -workspace #{temp_dir}/checkout/ComposableArchitecture.xcworkspace \
#       -configuration Release \
#       -scheme ComposableArchitecture \
#       -destination "generic/platform=iOS Simulator" \
#       -archivePath "#{temp_dir}/checkout/archives/ios_simulator" \
#       -skipPackagePluginValidation \
#       -skipMacroValidation \
#       -quiet \
#       SKIP_INSTALL=NO \
#       BUILD_LIBRARY_FOR_DISTRIBUTION=YES
# BUILD_IOS_SIMULATOR

# sh(<<~BUNDLE_XCFRAMEWORK)
#     xcodebuild -create-xcframework \
#            -framework #{temp_dir}/checkout/My-iOS.framework \
#            -framework #{temp_dir}/checkout/My-iOS_Simulator.framework \
#            -output ComposableArchitecture.xcframework
# BUNDLE_XCFRAMEWORK

# -debug-symbols <absolute path to dSYM or BCSymbolMaps folder in the xcarchive> # available from XCode 12.0+
#            -debug-symbols <absolute path to dSYM or BCSymbolMaps folder in the xcarchive> # available from XCode 12.0+



    # _____________________________________________

    #     create_xcframework(
    #  workspace: "#{temp_dir}/checkout/ComposableArchitecture.xcworkspace",
    #  scheme: "ComposableArchitecture",
    #  product_name: "ComposableArchitecture",
    #  #product_name: 'Sample', # optional if scheme doesnt match the name of your framework
    # #  destinations: ["iOS", "maccatalyst", "tvOS", "watchOS", "macOS"],
    # #  destinations: ["iOS"],
    #  destinations: ["iOS"],
    #  include_dSYMs: true,
    #  include_BCSymbolMaps: true,
    #  include_debug_symbols: true,
    #  enable_bitcode: true,
    #  xcframework_output_directory: "#{temp_dir}/checkout",
    #   # xcframework_output_directory: "Products/xcframeworks",
    #  remove_xcarchives: false,
    #  xcargs: 'RESILIENT_LIBRARIES=YES -skipPackagePluginValidation -skipMacroValidation -parallelizeTargets',
    #  override_xcargs: false,
    # #  buildlog_path: "#{temp_dir}/generated",
    # )

    # print("pwd", Dir.pwd)



  # in_directory("#{temp_dir}/checkout") do

  #   sh("rm -r Examples/")

  #   # Checkout to requested tag
  #   _ = sh("git tag -n --sort=-v:refname")
  #   sh("git checkout #{tag}")

  #   # Change xcode version to one used by the project authors
  #   xcodes(version: '15.4.0', select_for_current_build_only: true)
  #   skip_xcode_validations

    

  #   target = "ComposableArchitecture"

  #   # ______________________________________________________________________________
  #   # # Build binary

  #   # -showsdks \
  #   #     -showdestinations \
  #   #     -showBuildSettings \
  #   #     -configuration Release \
  #   #     -skipPackagePluginValidation \
  #   #     -skipMacroValidation

  #   # # 1. Archive iOS device slice
  #   # sh(<<~ARCHIVE_IOS)
  #   #   xcodebuild archive \
  #   #     -workspace "ComposableArchitecture.xcworkspace" \
  #   #     -scheme #{target} \
  #   #     -configuration Release \
  #   #     -destination "generic/platform=iOS" \
  #   #     -archivePath "./.generated/archives/ios_devices.xcarchive" \
  #   #     -parallelizeTargets \
  #   #     -skipPackagePluginValidation \
  #   #     -skipMacroValidation \
  #   #     SKIP_INSTALL=NO \
  #   #     BUILD_LIBRARY_FOR_DISTRIBUTION=YES \   
  #   # ARCHIVE_IOS
  #   # #-packagePath .

  #   # # # 2. Archive iOS simulator slice
  #   # sh(<<~ARCHIVE_SIMULATOR)
  #   #   xcodebuild archive \
  #   #     -workspace "ComposableArchitecture.xcworkspace" \
  #   #     -scheme #{target} \
  #   #     -verbose \
  #   #     -configuration Release \
  #   #     -destination "generic/platform=iOS Simulator" \
  #   #     -archivePath "./.generated/archives/ios_simulators.xcarchive" \
  #   #     -parallelizeTargets \
  #   #     -skipPackagePluginValidation \
  #   #     -skipMacroValidation \
  #   #     SKIP_INSTALL=NO \
  #   #     BUILD_LIBRARY_FOR_DISTRIBUTION=YES \   
  #   # ARCHIVE_SIMULATOR
  #   # # # #-packagePath .

  #   # # # 3. Create XCFramework from the archives
  #   # sh(<<~CREATE_XCF)
  #   #   xcodebuild -create-xcframework \
  #   #     -archive ./.generated/archives/ios_devices.xcarchive \
  #   #     -archive ./.generated/archives/ios_simulators.xcarchive \
  #   #     -output ./.generated/xcframeworks/ComposableArchitecture.xcframework
  #   # CREATE_XCF

  #   # DOESN'T WORK BECAUSE TIC TAC TOE IS SWIFT 6.0 LOL
  #   # create_xcframework(
  #   #  workspace: "#{Dir.pwd}/ComposableArchitecture.xcworkspace",
  #   #  scheme: 'ComposableArchitecture',
  #   #  #product_name: 'Sample', # optional if scheme doesnt match the name of your framework
  #   #  destinations: ["iOS", "maccatalyst", "tvOS", "watchOS", "macOS"],
  #   #  #destinations: ["iOS"],
  #   #  include_dSYMs: true,
  #   #  include_BCSymbolMaps: true,
  #   #  include_debug_symbols: true,
  #   #  enable_bitcode: true,
  #   #  xcframework_output_directory: "#{Dir.pwd}/../xcframework",
  #   #  xcargs: 'RESILIENT_LIBRARIES=1',
  #   #  override_xcargs: false,
  #   #  remove_xcarchives: false
  #   # )
  
  # # ______________________________________________________________________________
  # # 
  # #
  #     # Query available build configurations, SDKs and destinations
  #   # sh(<<~LIST_BUILD_CONFIG)
  #   #   xcodebuild archive \
  #   #     -workspace "ComposableArchitecture.xcworkspace" \
  #   #     -list
  #   # LIST_BUILD_CONFIG
  #   # 
  #   # sh(<<~BUILD_FRAMEWORK)
  #   #   swift build \
  #   #   --configuration release \
  #   #   --target ComposableArchitecture \
  #   #   -Xswiftc -emit-module-interface \
	# 	#   -Xswiftc -enable-library-evolution
  #   # BUILD_FRAMEWORK
  #   # --product ComposableArchitecture \
  #   # 
    
  #   # sh(<<~BUILD_XCFRAMEWORK)
  #   #   xcodebuild -create-xcframework \
  #   #   -library build/ios_devices/release/libComposableArchitecture.a \
  #   #   -headers Sources/ComposableArchitecture/include \
  #   #   -library build/ios_simulators/release/libComposableArchitecture.a \
  #   #   -headers Sources/ComposableArchitecture/include \
  #   #   -output ComposableArchitecture.xcframework
  #   # BUILD_XCFRAMEWORK

  # # ______________________________________________________________________________
  # # 
  # #
  #   # sh(<<~BUILD)
  #   #   xcodebuild build \
  #   #     -workspace ComposableArchitecture.xcworkspace \
  #   #     -scheme #{target} \
  #   #     -destination "generic/platform=iOS" \  
  #   #     -skipPackagePluginValidation \
  #   #     -skipMacroValidation \
  #   #     -quiet \
  #   #     SKIP_INSTALL=NO \
  #   #     BUILD_LIBRARY_FOR_DISTRIBUTION=YES
  #   # BUILD
  #   # # -archivePath "archives/ComposableArchitecture" \
  #   # sh(<<~ARCHIVE)
  #   #   xcodebuild archive \
  #   #     -workspace ComposableArchitecture.xcworkspace \
  #   #     -scheme #{target} \
  #   #     -destination "generic/platform=iOS" \
  #   #     -archivePath "archives/ComposableArchitecture" \
  #   #     -skipPackagePluginValidation \
  #   #     -skipMacroValidation \
  #   #     -quiet \
  #   #     SKIP_INSTALL=NO \
  #   #     BUILD_LIBRARY_FOR_DISTRIBUTION=YES
  #   # ARCHIVE
  #   #

  #   create_xcframework(
  #    workspace: "#{Dir.pwd}/ComposableArchitecture.xcworkspace",
  #    scheme: 'ComposableArchitecture',
  #    #product_name: "swift-composable-architecture",
  #    #product_name: 'Sample', # optional if scheme doesnt match the name of your framework
  #   #  destinations: ["iOS", "maccatalyst", "tvOS", "watchOS", "macOS"],
  #   #  destinations: ["iOS"],
  #    destinations: ["iOS"],
  #    include_dSYMs: true,
  #    include_BCSymbolMaps: true,
  #    include_debug_symbols: true,
  #    enable_bitcode: true,
  #    xcframework_output_directory: "#{Dir.pwd}/generated",
  #    remove_xcarchives: false,
  #    xcargs: 'RESILIENT_LIBRARIES=YES -skipPackagePluginValidation -skipMacroValidation -parallelizeTargets',
  #    override_xcargs: false,
  #    buildlog_path: "#{Dir.pwd}/generated",
  #   )

  #   print("pwd", Dir.pwd)
  # end